SEMAINE 2 
[Question P1.1] Comment représentez-vous ces vecteurs ? Comment sont-ils organisés : quels attributs ? quelles méthodes ? quels droits d'accès ?
	Pour representer les vecteurs dans le programme on a créé une classe "Vecteur". Pour cette classe, les attributs en private sont:
	- un vecteur du type vector (il contient la liste des coordonnées du vecteur)
	les méthodes en private sont:
	- un fonction "getVecteur" qui retourne le vecteur de l'attribut ci dessus
	Les méthodes en public sont:
	- une fonction "agumente" qui rajoute une dimension au vecteur consideré et qui prend en argument le valeur à rajouter
	- une fonction "affiche" qui affiche ce vecteur
	- une fonction "compare" qui test si le vecteur consideré est égal à un autre vecteur pris en argument. Cette fonction fait appel à la méthode "getVecteur" et en première instance teste les tailles des deux vecteurs et, dans le cas ou elles sont égales, teste les valeurs de chacune des composantes des vecteurs.
       -





[Question P1.2] Quel choix avez vous fait pour les opérations entre vecteurs de dimensions différentes ?
Pour toutes les operations, est le vecteur de plus petite taille qui détermine l'opération.


SEMAINE 4
[Question P4.1] Avez-vous ajouté un constructeur de copie ? Pourquoi (justifiez votre choix) ?
Nous avons choisit de ne pas ajouter de constructeur de copie pour le moment car on considere que ce n est pas utile car on a pas utilise de pointeur comme attribut.
Dans le cas ou nous aurions utilise un pointeur comme attribut de la classe,pour ne pas creer de "bugg" au moment de la supression de l objet pointé.

[Question P4.2] Si l'on souhaitait ajouter un constructeur par coordonnées sphériques (deux angles et une longueur) pour les vecteurs de dimension 3,

a] que cela impliquerait-il au niveau des attributs de la classe ?
b] quelle serait la difficulté majeure (voire l'impossibilité) de sa réalisation en C++ ? (C'est d'ailleurs pour cela qu'on ne vous demande pas de faire un tel constructeur !)

Le probleme ici est le suivant: si l'on veut distinguer les angles des longeurs dans un meme tableau (car nous avons cree des surcharges pour le type vector) il nous faudrait utiliser un tableau de pointeurs , ce qui changerait notre reponse precedente: cela nous demanderait de travailler avec des constructeurs et desctructeurs de copies.

[Question P4.3] Quels opérateurs avez vous introduits ?
Nous avons introduit: 
- un operateur == dans la classe Vecteur
- un operateur != dans la classe Vecteur (inseré car on a introduit == ) 
- un operateur += dans la classe Vecteur
- un operateur -= dans la classe Vecteur
- un operateur [] dans la classe Vecteur qui sert à renvoier un element i du vector "vecteur" (attribut in private)
- un operatuer + à l'exterieur de la classe Vecteur (addition entre instances du type Vecteur)
- un operateur - à l'exterieur de la classe Vecteur (soustraction entre instances du type Vecteur)
- un operateur * à l'exterieur de la classe Vecteur (produit scalaire entre deux vecteurs, prend en argoument deux references constantes du type Vectuer et retourne un type double)
- un operateur * à l'exterieur de la classe Vecteur (produit entre un vecteur et un sclaire, prend en argoument une reference constante du type Vecteur et un scalaire du type double et retourne un type Vecteur)
- un operateur ^ à l'exterieur de la classe Vecteur (produit vectoriel entre deux instances di type Vecteur) 


SEMAINE 5
[Question P6.1] Comment avez vous conçu votre classe Integrateur ? 
La classe Integrateur qu'on a concu est une classe qui n'a ni d'arguments ni de methodes. On a prefere creer une classe Integrateur que aura comme sous classes 
les differents types possibiles d'integration numeriques, et donc on rajoutera les methodes partages entre les differents sous classes une fois que celles ci seront concues.

[Question P6.2] Quelle est la relation entre les classes Integrateur et IntegrateurEulerCromer ?
La classe IntegrateurEulerCromer (qu'on a appele IntegrateurEC) est une sous classe de la classe Integrateur.

[Question P7.1] Comment se situent ces classes par rapport à la classe Oscillateur définie la semaine passée ?
Les classes Pendule et Ressort sont deux sous classes differentes par héritage de la superclasse Oscillateur. Les deux implementent la methode fonction de la classe Oscillateur
et partagent les attributs d'Oscillateur. Nous avons aussi rajoute des nouveaux attributs à ces deux classes.


SEMAINE 7:
[Question P8.1] En termes de POO, quelle est donc la nature de la méthode dessine() ?
dessine ac comme type de retour void car il y en a pas , et virtual car déclarée dans Dessinable et utilisée dans système sous classe héritée de Dessinable , ainsi que dans Support dessin qui n est pas sous classe de Dessinable mais un pointeur attribut de Dessinable pointe sur la classe Support Dessin.(moyen clair)

[Question P8.2] Quelle est la bonne façon de le faire dans un cadre de programmation orientée-objet ? Dessinable a besoin de support dessin pas compris

[Question P8.3] A quoi faut-il faire attention pour les classes contenant des pointeurs ? Quelles solutions peut-on envisager ?



[Question P8.4] Comment représentez vous la classe Systeme ? 
Expliquez votre conception (attributs, interface, ...).



