SEMAINE 2 
[Question P1.1] Comment représentez-vous ces vecteurs ? Comment sont-ils organisés : quels attributs ? quelles méthodes ? quels droits d'accès ?
	Pour representer les vecteurs dans le programme on a créé une classe "Vecteur". Pour cette classe, les attributs en private sont:
	- un vecteur du type vector (il contient la liste des coordonnées du vecteur)
	les méthodes en private sont:
	- un fonction "getVecteur" qui retourne le vecteur de l'attribut ci dessus
	Les méthodes en public sont:
	- une fonction "agumente" qui rajoute une dimension au vecteur consideré et qui prend en argument le valeur à rajouter
	- une fonction "affiche" qui affiche ce vecteur
	- une fonction "compare" qui test si le vecteur consideré est égal à un autre vecteur pris en argument. Cette fonction fait appel à la méthode "getVecteur" et en première instance teste les tailles des deux vecteurs et, dans le cas ou elles sont égales, teste les valeurs de chacune des composantes des vecteurs.
       -





[Question P1.2] Quel choix avez vous fait pour les opérations entre vecteurs de dimensions différentes ?


SEMAINE 4
[Question P4.1] Avez-vous ajouté un constructeur de copie ? Pourquoi (justifiez votre choix) ?
Nous avons choisit de ne pas ajouter de constructeur de copie pour le moment car on considere que ce n est pas utile car on a pas utilise de pointeur comme attribut.
Dans le cas ou nous aurions utilise un pointeur comme attribut de la classe,pour ne pas creer de "bugg" au moment de la supression de l objet pointé.

[Question P4.2] Si l'on souhaitait ajouter un constructeur par coordonnées sphériques (deux angles et une longueur) pour les vecteurs de dimension 3,

a] que cela impliquerait-il au niveau des attributs de la classe ?
b] quelle serait la difficulté majeure (voire l'impossibilité) de sa réalisation en C++ ? (C'est d'ailleurs pour cela qu'on ne vous demande pas de faire un tel constructeur !)

Le probleme ici est le suivant: si l'on veut distinguer les angles des longeurs dans un meme tableau (car nous avons cree des surcharges pour le type vector) il nous faudrait utiliser un tableau de pointeurs , ce qui changerait notre reponse precedente: cela nous demanderait de travailler avec des constructeurs et desctructeurs de copies.
 



